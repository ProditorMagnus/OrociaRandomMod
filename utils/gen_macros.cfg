#textdomain wesnoth-OrociaRandomMod
#########################################################################
##																	 ##
##  General Macros													 ##
##																	 ##
##																	 ##
##  This is a collection of general macros that are most-likely to be  ##
##  incorporated at any point in a scenario.						   ##
##																	 ##
##  Good Luck.														 ##
##																	 ##
##  governor														   ##
##																	 ##
#########################################################################

#!fileheader A help file for gen_macros.cfg.
#!pagetitle Wesnoth configuration file.
#!version Version: 0.0.6
#!WMLversion WML/Wesnoth: 1.2.1
#!modified Date/Time: 10:22 PM 2/18/2007

#define MSGBOX CAPTION MSG
    #!description A message box.
    #!param CAPTION Caption.
    #!param MSG Message.
    [message]
        speaker=narrator
        caption= _ "{CAPTION}"
        message= _ "{MSG}"
        image=wesnoth-icon.png
    [/message]
#enddef

#define CONCATENATE VAR STRING1 STRING2
    #!description Concatenate two strings.
    #!param VAR Variable to recieve concatenated string.
    #!param STRING1 First string.
    #!param STRING2 Second string.
    {VARIABLE_OP {VAR} format "{STRING1}|{STRING2}"}
#enddef

#define CONCATENATE_COMMA VAR STRING1 STRING2
    #!description Concatenate two strings. Separate them by a comma.
    #!param VAR Variable to recieve concatenated string.
    #!param STRING1 First string.
    #!param STRING2 Second string.
    {VARIABLE_OP {VAR} format "{STRING1},{STRING2}"}
#enddef

#define CONCATENATE_SPACE VAR STRING1 STRING2
    #!description Concatenate two strings. Separate them by a space.
    #!param VAR Variable to recieve concatenated string.
    #!param STRING1 First string.
    #!param STRING2 Second string.
    {VARIABLE_OP {VAR} format "{STRING1} {STRING2}"}
#enddef

#define FLIP_VARS_IF_TRUE VAR1 TEST VAR2
    #!description On a test, variable values are exchanged.
    #!param VAR1 First variable.
    #!param TEST Test condition ex: less_than
    #!param VAR2 Second Variable.
    {BEGIN if}
    {CONDITION {VAR1} {TEST} ${VAR2}}
    {BEGIN then}
    {VARIABLE temp.flip.copy ${VAR1}}
    {VARIABLE {VAR1} ${VAR2}}
    {VARIABLE {VAR2} $temp.flip.copy}
    {CLEAR_VARIABLE temp.flip.copy}
    {END then}
    {END if}
#enddef

#define FIT_NUMERICALVAR_TO_RANGE VAR RANGE_LOW RANGE_HIGH NEW_VAL_LOW NEW_VAL_HIGH
    #!description Fit a number to a range. If out of bounds, change the variable according to new values.
    #!param VAR Variable to evaluate.
    #!param RANGE_LOW Low end of range.
    #!param RANGE_HIGH High end of range.
    #!param NEW_VAL_LOW If less_then RANGE_LOW, VAR is set to NEW_VAL_LOW.
    #!param NEW_VAL_HIGH If greater_than RANGE_HIGH, VAR is set to NEW_VAL_HIGH.
    ## if(VAR < RANGE_LOW) then VAR = NEW_VAL_LOW;
    ## else if(VAR > RANGE_HIGH) then VAR = NEW_VAL_HIGH;
    {BEGIN if}
    {CONDITION {VAR} less_than {RANGE_LOW}}
    {BEGIN then}
    {VARIABLE {VAR} {NEW_VAL_LOW}}
    {END then}
    {BEGIN else}
    {BEGIN if}
    {CONDITION {VAR} greater_than {RANGE_HIGH}}
    {BEGIN then}
    {VARIABLE {VAR} {NEW_VAL_HIGH}}
    {END then}
    {END if}
    {END else}
    {END if}
#enddef

#define BEGIN_IF_NUMERICALVAR_IN_RANGE VAR RANGE_LOW RANGE_HIGH
    #!description If statement for a variable. Check to see if its contained in an inclusive range. Close with END_IF_NUMERICALVAR_IN_RANGE.
    #!param VAR Variable to check.
    #!param RANGE_LOW Low end of the range.
    #!param RANGE_HIGH High end of the range.
    {BEGIN if}
    {CONDITION {VAR} greater_than_equal_to {RANGE_LOW}}
    {BEGIN then}
    {BEGIN if}
    {CONDITION {VAR} less_than_equal_to {RANGE_HIGH}}
#enddef

#define END_IF_NUMERICALVAR_IN_RANGE
    #!description Closing tages for BEGIN_IF_NUMERICALVAR_IN_RANGE.
    {END if}
    {END then}
    {END if}
#enddef

#define CONDITION VAR TEST VALUE
    #!description Use this to replace [variable] evaluation.
    #!param VAR Variable to evaluate.
    #!param TEST Test operation ex: less_than
    #!param VALUE Value to compare VAR to.
    [variable]
        name={VAR}
        {TEST}={VALUE}
    [/variable]
#enddef

#define ARGUMENT _ARGUMENT
    #!description Expand an argument.
    #!param _ARGUMENT Argument to expand.
    {_ARGUMENT}
#enddef

#define FILTER _FILTER
    #!description Expand a filter.
    #!param _FILTER Filter to expand.
    [filter]
        {ARGUMENT {_FILTER}}
    [/filter]
#enddef

#define BEGIN TAG
    #!description Begins a tag.
    #!param Tag to begin.
    [{TAG}]
#enddef

#define END TAG
    #!description Closes a tag.
    #!param Tag to close.
[/{TAG}]
#enddef

#define REDRAW
    #!description [redraw][/redraw]
    [redraw]
    [/redraw]
#enddef

#define STORE_SIDE_GOLD_TO_VAR SIDE VAR
    #!description Retrieve the gold of a side.
    #!param SIDE Side number.
    #!param VAR Variable to accept gold amount.
    [store_gold]
        side={SIDE}
        variable={VAR}
    [/store_gold]
#enddef

#define ADD_GOLD_SIDE SIDE AMOUNT
    #!description Adds gold to a side.
    #!param SIDE Side to add gold.
    #!param AMOUNT Amount (+/-) to add.
    [gold]
        side={SIDE}
        amount={AMOUNT}
    [/gold]
#enddef

#define KILL_SIDE SIDE
    #!description Kill an entire side.
    #!param SIDE Side to kill.
    [kill]
        side={SIDE}
    [/kill]
#enddef

#define KILL_SIDE_LEADER SIDE
    #!description Kill a side leader.
    #!param SIDE Side leader to kill.
    [kill]
        side={SIDE}
        canrecruit=yes
    [/kill]
#enddef

#define SET_TERRAIN TERRAIN_LETTER X_LOCS Y_LOCS
    #!description Change the terrain.
    #!param TERRAIN_LETTER New terrain letter.
    #!param X_LOCS Single or comma seperated list of x value(s).
    #!param Y_LOCS Single or comma seperated list of y value(s).
    [terrain]
        terrain={TERRAIN_LETTER}
        x={X_LOCS}
        y={Y_LOCS}
    [/terrain]
#enddef

#define ADD_OBJECTIVE_WIN DESCRIPTION
    #!description Add a winning objective.
    #!param DESCRIPTION Descriptive text for the objective.
    [objective]
        description=_ "{DESCRIPTION}"
        condition=win
    [/objective]
#enddef

#define ADD_OBJECTIVE_LOSE DESCRIPTION
    #!description Add a losing objective.
    #!param DESCRIPTION Descriptive text for the objective.
    [objective]
        description=_ "{DESCRIPTION}"
        condition=lose
    [/objective]
#enddef

#define SET_LABEL X Y TEXT
    #!description Add a text label to the map.
    #!param TEXT Text string.
    #!param X X coordinate.
    #!param Y Y coordinate.
    [label]
        x={X}
        y={Y}
        text={TEXT}
    [/label]
#enddef
